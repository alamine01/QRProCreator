import { NextRequest, NextResponse } from 'next/server';

// Middleware de sÃ©curitÃ© pour les endpoints admin
export function validateAdminRequest(request: NextRequest): NextResponse | null {
  // VÃ©rifier l'origine de la requÃªte
  const origin = request.headers.get('origin');
  const referer = request.headers.get('referer');
  const allowedOrigins = [
    'http://localhost:3000',
    'https://qrprocreator.com',
    'https://www.qrprocreator.com'
  ];
  
  if (origin && !allowedOrigins.includes(origin)) {
    console.log('ðŸš« [SECURITY] Origine non autorisÃ©e:', origin);
    return NextResponse.json(
      { error: 'Origine non autorisÃ©e' },
      { status: 403 }
    );
  }
  
  if (!origin && !referer) {
    console.log('ðŸš« [SECURITY] RequÃªte suspecte - Pas d\'origine');
    return NextResponse.json(
      { error: 'RequÃªte suspecte' },
      { status: 403 }
    );
  }

  // VÃ©rifier le User-Agent pour dÃ©tecter les bots
  const userAgent = request.headers.get('user-agent');
  if (!userAgent || userAgent.length < 10) {
    console.log('ðŸš« [SECURITY] User-Agent suspect:', userAgent);
    return NextResponse.json(
      { error: 'User-Agent invalide' },
      { status: 403 }
    );
  }

  // VÃ©rifier la mÃ©thode HTTP
  const method = request.method;
  if (!['GET', 'POST', 'PUT', 'DELETE'].includes(method)) {
    console.log('ðŸš« [SECURITY] MÃ©thode HTTP non autorisÃ©e:', method);
    return NextResponse.json(
      { error: 'MÃ©thode HTTP non autorisÃ©e' },
      { status: 405 }
    );
  }

  return null; // RequÃªte valide
}

// Fonction pour valider les emails autorisÃ©s
export function validateAuthorizedEmail(email: string): boolean {
  const authorizedEmails = [
    'admin@qrprocreator.com',
    'contact@qrprocreator.com',
    // Ajoutez votre email ici temporairement
  ];
  
  return authorizedEmails.includes(email);
}
