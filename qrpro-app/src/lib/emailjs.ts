import emailjs from '@emailjs/browser';

// Configuration EmailJS
const EMAILJS_SERVICE_ID = 'service_xwz0aqt'; // Votre Service ID Hostinger
const EMAILJS_TEMPLATE_ID_CONFIRMATION = 'template_lw6mpya'; // Template Order Confirmation
const EMAILJS_TEMPLATE_ID_STATUS = 'template_4kvu0dl'; // Template Contact Us (pour les mises √† jour)
const EMAILJS_PUBLIC_KEY = 'TFj5gyJ_KcoCWQUmj'; // Votre Public Key EmailJS

// Option pour d√©sactiver temporairement l'envoi d'email (pour debug)
const EMAIL_ENABLED = true; // R√©activ√© - EmailJS fonctionne

// Configuration de l'exp√©diteur professionnel
const FROM_EMAIL = 'alamine@qrprocreator.com'; // Votre email professionnel Hostinger
const FROM_NAME = 'QR Pro Creator';
const REPLY_TO = 'alamine@qrprocreator.com';
const SUPPORT_EMAIL = 'alamine@qrprocreator.com';
const WHATSAPP_NUMBER = '+221 77 123 45 67';

// Interface pour les donn√©es de commande
interface OrderEmailData {
  orderNumber: string;
  customerEmail: string;
  customerName: string;
  totalAmount: number;
  items: Array<{
    name: string;
    quantity: number;
    price: number;
  }>;
}

// Interface pour les donn√©es de mise √† jour de statut
interface StatusUpdateEmailData {
  orderNumber: string;
  customerEmail: string;
  customerName: string;
  status: 'pending' | 'processing' | 'delivered' | 'cancelled';
}

// Fonction pour envoyer un email de confirmation de commande via EmailJS
export const sendOrderConfirmationEmail = async (
  customerEmail: string, 
  orderNumber: string, 
  totalAmount: number,
  customerName: string,
  orderItems: Array<{name: string, quantity: number, price: number}>
): Promise<void> => {
  try {
    console.log('üöÄ [EMAILJS] === D√âBUT ENVOI CONFIRMATION ===');
    console.log('üìß [EMAILJS] Version du code:', 'v2.1 - Template original avec am√©liorations');
    console.log('üìß [EMAILJS] Template utilis√©:', EMAILJS_TEMPLATE_ID_STATUS);
    console.log('üìß [EMAILJS] Timestamp:', new Date().toISOString());
    console.log('üìß Envoi de l\'email de confirmation via EmailJS...');
    
    // V√©rifier si l'envoi d'email est activ√©
    if (!EMAIL_ENABLED) {
      console.warn('‚ö†Ô∏è Envoi d\'email d√©sactiv√© (mode debug)');
      return;
    }
    
    // V√©rifier les param√®tres requis
    if (!customerEmail || !orderNumber || !customerName) {
      console.error('‚ùå Param√®tres manquants pour l\'envoi d\'email');
      return;
    }
    
    
    // V√©rifier la configuration EmailJS
    console.log('üìß V√©rification de la configuration EmailJS:', {
      serviceId: EMAILJS_SERVICE_ID,
      templateId: EMAILJS_TEMPLATE_ID_CONFIRMATION, // Template de confirmation original
      publicKey: EMAILJS_PUBLIC_KEY.substring(0, 8) + '...',
      emailEnabled: EMAIL_ENABLED
    });
    
    // Pr√©parer les donn√©es pour EmailJS (template professionnel avec d√©tails structur√©s)
    const templateParams = {
      to_email: customerEmail,
      to_name: customerName,
      order_number: orderNumber,
      total_amount: totalAmount.toLocaleString(),
      items_list: orderItems.map(item => 
        `${item.name} (x${item.quantity}) - ${item.price.toLocaleString()} FCFA`
      ).join('\n'),
      company_name: FROM_NAME,
      support_email: 'alamine@qrprocreator.com',
      whatsapp_number: '+221 77 123 45 67',
      from_email: FROM_EMAIL,
      from_name: FROM_NAME,
      reply_to: REPLY_TO,
      // Param√®tres pour le template professionnel
      greeting_message: `Bonjour ${customerName},`,
      confirmation_text: `Nous avons bien re√ßu votre commande ${orderNumber} et nous vous en remercions !`,
      order_details_title: 'üì¶ D√©tails de votre commande :',
      next_steps_title: 'üöÄ Prochaines √©tapes :',
      next_steps_list: `‚Ä¢ Votre commande est en cours de traitement
‚Ä¢ Nous vous tiendrons inform√© de son avancement par email
‚Ä¢ Livraison pr√©vue sous 3-5 jours ouvr√©s`,
      contact_text: 'Pour toute question concernant votre commande, n\'h√©sitez pas √† nous contacter.',
      signature: `Cordialement,
L'√©quipe ${FROM_NAME}`,
      // Ajout d'informations pour am√©liorer la d√©livrabilit√©
      unsubscribe_text: 'Si vous ne souhaitez plus recevoir nos emails, vous pouvez nous contacter.',
      company_address: 'Dakar, S√©n√©gal',
      email_reason: 'Email de confirmation de commande'
    };

    console.log('üìß Param√®tres EmailJS:', templateParams);
    console.log('üìß Email destinataire:', customerEmail);

    // Envoyer l'email via EmailJS avec gestion d'erreur sp√©cifique
    try {
      // Essayer d'abord avec le template de confirmation
      let result;
      try {
        console.log('üìß [EMAILJS] Envoi de confirmation en cours vers:', customerEmail);
        
        // Ajouter un petit d√©lai pour √©viter le spam
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Utiliser le template de statut qui fonctionne pour la confirmation
        result = await emailjs.send(
          EMAILJS_SERVICE_ID,
          EMAILJS_TEMPLATE_ID_STATUS, // Template qui fonctionne
          templateParams,
          EMAILJS_PUBLIC_KEY
        );
        console.log('‚úÖ [EMAILJS] Email de confirmation envoy√© avec succ√®s:', {
          email: customerEmail,
          result: result,
          status: result.status,
          text: result.text
        });
      } catch (templateError) {
        console.warn('‚ö†Ô∏è Erreur avec le template de confirmation, essai avec le template de statut:', templateError);
        
        // Essayer avec le template de statut comme fallback
        const fallbackParams = {
          to_email: customerEmail,
          to_name: customerName,
          order_number: orderNumber,
          status: 'confirmed',
          status_message: 'Votre commande a √©t√© confirm√©e avec succ√®s',
          status_icon: '‚úÖ',
          company_name: FROM_NAME,
          support_email: SUPPORT_EMAIL,
          whatsapp_number: WHATSAPP_NUMBER,
          from_email: FROM_EMAIL,
          from_name: FROM_NAME,
          reply_to: REPLY_TO
        };
        
        result = await emailjs.send(
          EMAILJS_SERVICE_ID,
          EMAILJS_TEMPLATE_ID_STATUS,
          fallbackParams,
          EMAILJS_PUBLIC_KEY
        );
        console.log('‚úÖ Email envoy√© avec le template de statut (fallback)');
      }
      
      console.log('‚úÖ Email de confirmation envoy√© avec succ√®s:', result);
      
      // V√©rifier si le r√©sultat indique un succ√®s
      if (result && result.status === 200) {
        console.log('‚úÖ Email envoy√© avec succ√®s (status 200)');
      } else {
        console.warn('‚ö†Ô∏è Email envoy√© mais status non-standard:', result);
      }
      
    } catch (emailError) {
      // Capturer sp√©cifiquement les erreurs d'EmailJS
      console.error('‚ùå Erreur sp√©cifique EmailJS:', emailError);
      throw emailError; // Re-lancer pour √™tre captur√© par le catch principal
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'envoi de l\'email de confirmation:', error);
    
    // Analyser le type d'erreur
    let errorMessage = 'Erreur inconnue';
    let errorCode = 'UNKNOWN';
    
    if (error instanceof Error) {
      errorMessage = error.message;
    } else if (typeof error === 'object' && error !== null) {
      // G√©rer les erreurs d'EmailJS qui peuvent √™tre des objets
      if ('text' in error) {
        errorMessage = (error as any).text || 'Erreur EmailJS';
      } else if ('message' in error) {
        errorMessage = (error as any).message;
      } else if ('status' in error) {
        errorCode = `HTTP_${(error as any).status}`;
        errorMessage = `Erreur HTTP ${(error as any).status}`;
      }
    }
    
    console.error('‚ùå D√©tails de l\'erreur:', {
      errorType: typeof error,
      errorMessage,
      errorCode,
      errorObject: error,
      customerEmail,
      orderNumber,
      totalAmount,
      emailjsConfig: {
        serviceId: EMAILJS_SERVICE_ID,
        templateId: EMAILJS_TEMPLATE_ID_CONFIRMATION,
        publicKey: EMAILJS_PUBLIC_KEY.substring(0, 8) + '...'
      }
    });
    
    // En cas d'erreur, afficher un message √† l'utilisateur mais ne pas bloquer le processus
    console.warn('‚ö†Ô∏è L\'email de confirmation n\'a pas pu √™tre envoy√©, mais la commande a √©t√© cr√©√©e');
    
    // Ne pas throw l'erreur pour ne pas bloquer la cr√©ation de commande
    // throw error;
  }
};

// Fonction pour envoyer un email de mise √† jour de statut via EmailJS
export const sendOrderStatusUpdateEmail = async (
  customerEmail: string,
  orderNumber: string,
  status: 'pending' | 'processing' | 'delivered' | 'cancelled',
  customerName: string
): Promise<void> => {
  try {
    console.log('üìß [EMAILJS] Envoi de l\'email de mise √† jour via EmailJS...');
    console.log('üìß [EMAILJS] Param√®tres re√ßus:', {
      customerEmail,
      orderNumber,
      status,
      customerName,
      timestamp: new Date().toISOString()
    });
    
    // V√©rifier si l'envoi d'email est activ√©
    if (!EMAIL_ENABLED) {
      console.warn('‚ö†Ô∏è [EMAILJS] Envoi d\'email d√©sactiv√© (mode debug)');
      return;
    }
    
    // V√©rifier les param√®tres requis
    if (!customerEmail || !orderNumber || !customerName || !status) {
      console.error('‚ùå [EMAILJS] Param√®tres manquants pour l\'envoi d\'email:', {
        customerEmail: !!customerEmail,
        orderNumber: !!orderNumber,
        customerName: !!customerName,
        status: !!status
      });
      return;
    }
    
    
    const statusMessages = {
      pending: 'Votre commande est en attente de traitement',
      processing: 'Votre commande est en cours de traitement',
      delivered: 'Votre commande a √©t√© livr√©e avec succ√®s',
      cancelled: 'Votre commande a √©t√© annul√©e'
    };

    const statusIcons = {
      pending: '‚è≥',
      processing: 'üîÑ',
      delivered: '‚úÖ',
      cancelled: '‚ùå'
    };
    
    // Pr√©parer les donn√©es pour EmailJS
    const templateParams = {
      to_email: customerEmail,
      to_name: customerName,
      order_number: orderNumber,
      status: status,
      status_message: statusMessages[status],
      status_icon: statusIcons[status],
      company_name: FROM_NAME,
      support_email: SUPPORT_EMAIL,
      whatsapp_number: WHATSAPP_NUMBER,
      from_email: FROM_EMAIL,
      from_name: FROM_NAME,
      reply_to: REPLY_TO
    };

    console.log('üìß [EMAILJS] Param√®tres EmailJS pr√©par√©s:', templateParams);
    console.log('üìß [EMAILJS] Configuration EmailJS:', {
      serviceId: EMAILJS_SERVICE_ID,
      templateId: EMAILJS_TEMPLATE_ID_STATUS,
      publicKey: EMAILJS_PUBLIC_KEY.substring(0, 8) + '...'
    });

    // Envoyer l'email via EmailJS
    console.log('üìß [EMAILJS] Envoi en cours vers:', customerEmail);
    const result = await emailjs.send(
      EMAILJS_SERVICE_ID,
      EMAILJS_TEMPLATE_ID_STATUS,
      templateParams,
      EMAILJS_PUBLIC_KEY
    );
    
    console.log('‚úÖ [EMAILJS] Email de mise √† jour envoy√© avec succ√®s:', {
      email: customerEmail,
      result: result,
      status: result.status,
      text: result.text
    });
    
  } catch (error) {
    console.error('‚ùå [EMAILJS] Erreur lors de l\'envoi de l\'email de mise √† jour:', error);
    
    // Analyser le type d'erreur
    let errorMessage = 'Erreur inconnue';
    let errorCode = 'UNKNOWN';
    
    if (error instanceof Error) {
      errorMessage = error.message;
    } else if (typeof error === 'object' && error !== null) {
      // G√©rer les erreurs d'EmailJS qui peuvent √™tre des objets
      if ('text' in error) {
        errorMessage = (error as any).text || 'Erreur EmailJS';
      } else if ('message' in error) {
        errorMessage = (error as any).message;
      } else if ('status' in error) {
        errorCode = `HTTP_${(error as any).status}`;
        errorMessage = `Erreur HTTP ${(error as any).status}`;
      }
    }
    
    console.error('‚ùå [EMAILJS] D√©tails de l\'erreur:', {
      errorType: typeof error,
      errorMessage,
      errorCode,
      errorObject: error,
      customerEmail,
      orderNumber,
      status,
      customerName,
      emailjsConfig: {
        serviceId: EMAILJS_SERVICE_ID,
        templateId: EMAILJS_TEMPLATE_ID_STATUS,
        publicKey: EMAILJS_PUBLIC_KEY.substring(0, 8) + '...'
      }
    });
    
    // En cas d'erreur, afficher un message √† l'utilisateur mais ne pas bloquer le processus
    console.warn('‚ö†Ô∏è [EMAILJS] L\'email de mise √† jour n\'a pas pu √™tre envoy√©');
    
    // Ne pas throw l'erreur pour ne pas bloquer la mise √† jour de statut
    // throw error;
  }
};

// Fonction pour initialiser EmailJS (√† appeler au d√©marrage de l'app)
export const initializeEmailJS = () => {
  try {
    emailjs.init(EMAILJS_PUBLIC_KEY);
    console.log('‚úÖ EmailJS initialis√© avec succ√®s');
    console.log('üìß Configuration EmailJS:', {
      serviceId: EMAILJS_SERVICE_ID,
      templateIdConfirmation: EMAILJS_TEMPLATE_ID_CONFIRMATION,
      templateIdStatus: EMAILJS_TEMPLATE_ID_STATUS,
      publicKey: EMAILJS_PUBLIC_KEY.substring(0, 8) + '...' // Masquer la cl√© pour la s√©curit√©
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation d\'EmailJS:', error);
    console.error('‚ùå D√©tails de l\'erreur d\'initialisation:', {
      message: error instanceof Error ? error.message : 'Erreur inconnue',
      stack: error instanceof Error ? error.stack : undefined
    });
  }
};

// Fonction pour tester la configuration EmailJS
export const testEmailJSConfiguration = async (): Promise<boolean> => {
  try {
    console.log('üß™ Test de la configuration EmailJS...');
    
    // V√©rifier que EmailJS est disponible
    if (!emailjs || typeof emailjs.send !== 'function') {
      console.error('‚ùå EmailJS n\'est pas disponible');
      return false;
    }
    
    // V√©rifier la configuration
    if (!EMAILJS_SERVICE_ID || !EMAILJS_TEMPLATE_ID_CONFIRMATION || !EMAILJS_PUBLIC_KEY) {
      console.error('‚ùå Configuration EmailJS incompl√®te');
      return false;
    }
    
    console.log('‚úÖ Configuration EmailJS valide');
    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors du test de configuration EmailJS:', error);
    return false;
  }
};
