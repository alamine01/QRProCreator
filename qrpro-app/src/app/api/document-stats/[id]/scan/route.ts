import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/firebase';
import { collection, doc, increment, addDoc, getDoc, updateDoc, serverTimestamp } from 'firebase/firestore';

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    
    // R√©cup√©rer les informations de la requ√™te
    const userAgent = request.headers.get('user-agent') || 'Unknown';
    const forwarded = request.headers.get('x-forwarded-for');
    const ip = forwarded ? forwarded.split(',')[0] : 'Unknown';
    
    console.log(`üì± Nouveau scan QR pour document: ${id}`);
    console.log(`üåê User Agent: ${userAgent}`);
    console.log(`üìç IP: ${ip}`);

    // V√©rifier que le document existe
    const documentRef = doc(db, 'documents', id);
    const documentSnap = await getDoc(documentRef);
    
    if (!documentSnap.exists()) {
      console.log(`‚ùå Document ${id} non trouv√©`);
      return NextResponse.json({ error: 'Document non trouv√©' }, { status: 404 });
    }

    const documentData = documentSnap.data();
    
    // V√©rifier que le document est public et que le tracking est activ√©
    if (documentData.classification !== 'public' || !documentData.statsTrackingEnabled) {
      console.log(`‚ùå Tracking non autoris√© pour document ${id}`);
      return NextResponse.json({ error: 'Tracking non autoris√© pour ce document' }, { status: 403 });
    }

    // Incr√©menter le compteur de scans QR
    await updateDoc(doc(db, 'documents', id), {
      qrScanCount: increment(1)
    });

    // Enregistrer le scan dans la collection qrScans
    const scanData = {
      documentId: id,
      timestamp: serverTimestamp(),
      userAgent: userAgent,
      ip: ip,
      location: null // Peut √™tre enrichi plus tard avec des services de g√©olocalisation
    };

    const scanRef = await addDoc(collection(db, 'qrScans'), scanData);
    
    console.log(`‚úÖ Scan QR enregistr√© avec ID: ${scanRef.id}`);
    console.log(`üìä Nouveau total de scans: ${(documentData.qrScanCount || 0) + 1}`);

    // Rediriger vers le document
    const documentUrl = `/api/document/${id}`;
    
    return NextResponse.redirect(new URL(documentUrl, request.url));

  } catch (error) {
    console.error('‚ùå Erreur lors du tracking du scan QR:', error);
    return NextResponse.json({ error: 'Erreur interne du serveur' }, { status: 500 });
  }
}

// M√©thode GET pour permettre les scans QR depuis des applications mobiles
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    
    // R√©cup√©rer les informations de la requ√™te
    const userAgent = request.headers.get('user-agent') || 'Unknown';
    const forwarded = request.headers.get('x-forwarded-for');
    const ip = forwarded ? forwarded.split(',')[0] : 'Unknown';
    
    console.log(`üì± Scan QR GET pour document: ${id}`);

    // V√©rifier que le document existe
    const documentRef = doc(db, 'documents', id);
    const documentSnap = await getDoc(documentRef);
    
    if (!documentSnap.exists()) {
      console.log(`‚ùå Document ${id} non trouv√©`);
      return NextResponse.json({ error: 'Document non trouv√©' }, { status: 404 });
    }

    const documentData = documentSnap.data();
    
    // V√©rifier que le document est public et que le tracking est activ√©
    if (documentData.classification !== 'public' || !documentData.statsTrackingEnabled) {
      console.log(`‚ùå Tracking non autoris√© pour document ${id}`);
      return NextResponse.json({ error: 'Tracking non autoris√© pour ce document' }, { status: 403 });
    }

    // Incr√©menter le compteur de scans QR
    await updateDoc(doc(db, 'documents', id), {
      qrScanCount: increment(1)
    });

    // Enregistrer le scan dans la collection qrScans
    const scanData = {
      documentId: id,
      timestamp: serverTimestamp(),
      userAgent: userAgent,
      ip: ip,
      location: null
    };

    const scanRef = await addDoc(collection(db, 'qrScans'), scanData);
    
    console.log(`‚úÖ Scan QR GET enregistr√© avec ID: ${scanRef.id}`);

    // Rediriger vers le document
    const documentUrl = `/api/document/${id}`;
    
    return NextResponse.redirect(new URL(documentUrl, request.url));

  } catch (error) {
    console.error('‚ùå Erreur lors du tracking du scan QR GET:', error);
    return NextResponse.json({ error: 'Erreur interne du serveur' }, { status: 500 });
  }
}
