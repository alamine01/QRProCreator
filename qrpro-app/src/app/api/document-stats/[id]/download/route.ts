import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/firebase';
import { collection, doc, increment, addDoc, getDoc, updateDoc, serverTimestamp } from 'firebase/firestore';

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    
    // R√©cup√©rer les informations de la requ√™te
    const userAgent = request.headers.get('user-agent') || 'Unknown';
    const forwarded = request.headers.get('x-forwarded-for');
    const ip = forwarded ? forwarded.split(',')[0] : 'Unknown';
    
    console.log(`üíæ Nouveau t√©l√©chargement pour document: ${id}`);
    console.log(`üåê User Agent: ${userAgent}`);
    console.log(`üìç IP: ${ip}`);

    // V√©rifier que le document existe
    const documentRef = doc(db, 'documents', id);
    const documentSnap = await getDoc(documentRef);
    
    if (!documentSnap.exists()) {
      console.log(`‚ùå Document ${id} non trouv√©`);
      return NextResponse.json({ error: 'Document non trouv√©' }, { status: 404 });
    }

    const documentData = documentSnap.data();
    
    // V√©rifier que le document est public et que le tracking est activ√©
    if (documentData.classification !== 'public' || !documentData.statsTrackingEnabled) {
      console.log(`‚ùå Tracking non autoris√© pour document ${id}`);
      return NextResponse.json({ error: 'Tracking non autoris√© pour ce document' }, { status: 403 });
    }

    // Incr√©menter le compteur de t√©l√©chargements
    try {
      await updateDoc(doc(db, 'documents', id), {
        downloadCount: increment(1)
      });
      console.log('‚úÖ Compteur de t√©l√©chargements incr√©ment√©');
    } catch (updateError) {
      console.log('‚ö†Ô∏è Erreur lors de l\'incr√©mentation du compteur:', updateError);
      // Continuer m√™me si l'incr√©mentation √©choue
    }

    // Enregistrer le t√©l√©chargement dans la collection documentDownloads
    const downloadData = {
      documentId: id,
      timestamp: serverTimestamp(),
      userAgent: userAgent,
      ip: ip,
      location: null // Peut √™tre enrichi plus tard avec des services de g√©olocalisation
    };

    const downloadRef = await addDoc(collection(db, 'documentDownloads'), downloadData);
    
    console.log(`‚úÖ T√©l√©chargement enregistr√© avec ID: ${downloadRef.id}`);
    console.log(`üìä Nouveau total de t√©l√©chargements: ${(documentData.downloadCount || 0) + 1}`);

    return NextResponse.json({ 
      success: true, 
      downloadId: downloadRef.id,
      newCount: (documentData.downloadCount || 0) + 1
    });

  } catch (error) {
    console.error('‚ùå Erreur lors du tracking du t√©l√©chargement:', error);
    return NextResponse.json({ 
      error: 'Erreur lors de l\'enregistrement du t√©l√©chargement',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

// M√©thode GET pour permettre les t√©l√©chargements depuis des applications mobiles
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    
    // R√©cup√©rer les informations de la requ√™te
    const userAgent = request.headers.get('user-agent') || 'Unknown';
    const forwarded = request.headers.get('x-forwarded-for');
    const ip = forwarded ? forwarded.split(',')[0] : 'Unknown';
    
    console.log(`üíæ T√©l√©chargement GET pour document: ${id}`);

    // V√©rifier que le document existe
    const documentRef = doc(db, 'documents', id);
    const documentSnap = await getDoc(documentRef);
    
    if (!documentSnap.exists()) {
      console.log(`‚ùå Document ${id} non trouv√©`);
      return NextResponse.json({ error: 'Document non trouv√©' }, { status: 404 });
    }

    const documentData = documentSnap.data();
    
    // V√©rifier que le document est public et que le tracking est activ√©
    if (documentData.classification !== 'public' || !documentData.statsTrackingEnabled) {
      console.log(`‚ùå Tracking non autoris√© pour document ${id}`);
      return NextResponse.json({ error: 'Tracking non autoris√© pour ce document' }, { status: 403 });
    }

    // Incr√©menter le compteur de t√©l√©chargements
    try {
      await updateDoc(doc(db, 'documents', id), {
        downloadCount: increment(1)
      });
      console.log('‚úÖ Compteur de t√©l√©chargements incr√©ment√© (GET)');
    } catch (updateError) {
      console.log('‚ö†Ô∏è Erreur lors de l\'incr√©mentation du compteur (GET):', updateError);
      // Continuer m√™me si l'incr√©mentation √©choue
    }

    // Enregistrer le t√©l√©chargement dans la collection documentDownloads
    const downloadData = {
      documentId: id,
      timestamp: serverTimestamp(),
      userAgent: userAgent,
      ip: ip,
      location: null
    };

    const downloadRef = await addDoc(collection(db, 'documentDownloads'), downloadData);
    
    console.log(`‚úÖ T√©l√©chargement GET enregistr√© avec ID: ${downloadRef.id}`);

    return NextResponse.json({ 
      success: true, 
      downloadId: downloadRef.id,
      newCount: (documentData.downloadCount || 0) + 1
    });

  } catch (error) {
    console.error('‚ùå Erreur lors du tracking du t√©l√©chargement GET:', error);
    return NextResponse.json({ 
      error: 'Erreur lors de l\'enregistrement du t√©l√©chargement',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}
