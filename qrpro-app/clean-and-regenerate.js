/**
 * Script pour nettoyer et reg√©n√©rer des donn√©es avec de vrais timestamps Firebase
 * Usage: node clean-and-regenerate.js
 */

const { initializeApp } = require('firebase/app');
const { getFirestore, collection, addDoc, doc, updateDoc, getDocs, query, where, deleteDoc, Timestamp } = require('firebase/firestore');

// Configuration Firebase
const firebaseConfig = {
  apiKey: "AIzaSyB0Kp...", // Remplacez par votre vraie cl√©
  authDomain: "studio-6374747103-d0730.firebaseapp.com",
  projectId: "studio-6374747103-d0730",
  storageBucket: "studio-6374747103-d0730.appspot.com",
  messagingSenderId: "123456789",
  appId: "1:123456789:web:abcdef123456"
};

// Initialiser Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

const TEST_DOCUMENT_ID = "itzoacB5xwRFvGR3Az2u";

// Donn√©es de test r√©alistes
const USER_AGENTS = [
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
  "Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1",
  "Mozilla/5.0 (Android 14; Mobile; rv:109.0) Gecko/120.0 Firefox/120.0",
  "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
];

const IP_ADDRESSES = [
  "192.168.1.100", "192.168.1.101", "192.168.1.102", "192.168.1.103",
  "10.0.0.50", "10.0.0.51", "10.0.0.52", "10.0.0.53"
];

function getRandomElement(array) {
  return array[Math.floor(Math.random() * array.length)];
}

// Fonction pour g√©n√©rer une date al√©atoire dans les 7 derniers jours
function getRandomRecentDate() {
  const now = new Date();
  const randomDays = Math.floor(Math.random() * 7);
  const randomHours = Math.floor(Math.random() * 24);
  const randomMinutes = Math.floor(Math.random() * 60);
  
  const date = new Date(now);
  date.setDate(date.getDate() - randomDays);
  date.setHours(randomHours, randomMinutes, 0, 0);
  
  return Timestamp.fromDate(date);
}

// Fonction pour nettoyer les donn√©es existantes
async function cleanExistingData() {
  console.log('üßπ Nettoyage des donn√©es existantes...');
  
  try {
    // Supprimer les scans QR existants
    const qrScansQuery = query(collection(db, 'qrScans'), where('documentId', '==', TEST_DOCUMENT_ID));
    const qrScansSnapshot = await getDocs(qrScansQuery);
    
    console.log(`üóëÔ∏è  Suppression de ${qrScansSnapshot.size} scans QR existants...`);
    for (const docSnap of qrScansSnapshot.docs) {
      await deleteDoc(docSnap.ref);
    }
    
    // Supprimer les t√©l√©chargements existants
    const downloadsQuery = query(collection(db, 'downloads'), where('documentId', '==', TEST_DOCUMENT_ID));
    const downloadsSnapshot = await getDocs(downloadsQuery);
    
    console.log(`üóëÔ∏è  Suppression de ${downloadsSnapshot.size} t√©l√©chargements existants...`);
    for (const docSnap of downloadsSnapshot.docs) {
      await deleteDoc(docSnap.ref);
    }
    
    // R√©initialiser les compteurs du document
    const docRef = doc(db, 'documents', TEST_DOCUMENT_ID);
    await updateDoc(docRef, {
      qrScanCount: 0,
      downloadCount: 0
    });
    
    console.log('‚úÖ Nettoyage termin√©');
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error);
  }
}

// Fonction pour g√©n√©rer de nouvelles donn√©es avec de vrais timestamps
async function generateNewData() {
  console.log('üîÑ G√©n√©ration de nouvelles donn√©es avec timestamps Firebase...');
  
  try {
    // G√©n√©rer des scans QR
    console.log('üî≤ G√©n√©ration de 8 scans QR...');
    for (let i = 0; i < 8; i++) {
      const scanData = {
        documentId: TEST_DOCUMENT_ID,
        timestamp: getRandomRecentDate(),
        userAgent: getRandomElement(USER_AGENTS),
        ip: getRandomElement(IP_ADDRESSES),
        location: null
      };
      
      await addDoc(collection(db, 'qrScans'), scanData);
      console.log(`‚úÖ Scan QR ${i + 1}/8 g√©n√©r√©`);
      
      // Petite pause
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    // G√©n√©rer des t√©l√©chargements
    console.log('üì• G√©n√©ration de 5 t√©l√©chargements...');
    for (let i = 0; i < 5; i++) {
      const downloadData = {
        documentId: TEST_DOCUMENT_ID,
        timestamp: getRandomRecentDate(),
        userAgent: getRandomElement(USER_AGENTS),
        ip: getRandomElement(IP_ADDRESSES),
        location: null
      };
      
      await addDoc(collection(db, 'downloads'), downloadData);
      console.log(`‚úÖ T√©l√©chargement ${i + 1}/5 g√©n√©r√©`);
      
      // Petite pause
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    // Mettre √† jour les compteurs du document
    const docRef = doc(db, 'documents', TEST_DOCUMENT_ID);
    await updateDoc(docRef, {
      qrScanCount: 8,
      downloadCount: 5
    });
    
    console.log('‚úÖ Nouvelles donn√©es g√©n√©r√©es avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration:', error);
  }
}

// Fonction pour v√©rifier les nouvelles donn√©es
async function verifyData() {
  console.log('üîç V√©rification des nouvelles donn√©es...');
  
  try {
    // V√©rifier les scans QR
    const qrScansQuery = query(collection(db, 'qrScans'), where('documentId', '==', TEST_DOCUMENT_ID));
    const qrScansSnapshot = await getDocs(qrScansQuery);
    
    console.log(`üìä ${qrScansSnapshot.size} scans QR trouv√©s`);
    
    if (qrScansSnapshot.size > 0) {
      const firstScan = qrScansSnapshot.docs[0].data();
      console.log('üî≤ Premier scan QR:');
      console.log(`   - Timestamp: ${firstScan.timestamp?.toDate ? firstScan.timestamp.toDate().toLocaleString('fr-FR') : 'Invalid'}`);
      console.log(`   - User Agent: ${firstScan.userAgent?.split(' ')[0] || 'Inconnu'}`);
      console.log(`   - IP: ${firstScan.ip || 'Inconnu'}`);
    }
    
    // V√©rifier les t√©l√©chargements
    const downloadsQuery = query(collection(db, 'downloads'), where('documentId', '==', TEST_DOCUMENT_ID));
    const downloadsSnapshot = await getDocs(downloadsQuery);
    
    console.log(`üìä ${downloadsSnapshot.size} t√©l√©chargements trouv√©s`);
    
    if (downloadsSnapshot.size > 0) {
      const firstDownload = downloadsSnapshot.docs[0].data();
      console.log('üì• Premier t√©l√©chargement:');
      console.log(`   - Timestamp: ${firstDownload.timestamp?.toDate ? firstDownload.timestamp.toDate().toLocaleString('fr-FR') : 'Invalid'}`);
      console.log(`   - User Agent: ${firstDownload.userAgent?.split(' ')[0] || 'Inconnu'}`);
      console.log(`   - IP: ${firstDownload.ip || 'Inconnu'}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  }
}

async function main() {
  console.log('üöÄ Script de nettoyage et r√©g√©n√©ration des donn√©es\n');
  
  await cleanExistingData();
  console.log('');
  await generateNewData();
  console.log('');
  await verifyData();
  
  console.log('\nüéâ Processus termin√© !');
  console.log('üìä Les donn√©es ont √©t√© nettoy√©es et r√©g√©n√©r√©es avec de vrais timestamps Firebase');
  console.log(`üîó Consultez la page: http://localhost:3000/document-stats/${TEST_DOCUMENT_ID}?email=daroul.itqaane.1@gmail.com`);
}

main().catch(console.error);
